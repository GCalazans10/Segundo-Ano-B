#Aula de Programa√ß√£o Orientada a Objetos (POO) em Python
#Objetivo da aula:
#Introduzir os conceitos b√°sicos da Programa√ß√£o Orientada a Objetos (POO) #usando Python, com exemplos simples e pr√°ticos.

#1. O que √© POO?
#POO √© um paradigma de programa√ß√£o que organiza o c√≥digo em objetos, que #cont√™m:

#Atributos (dados, caracter√≠sticas)

#M√©todos (a√ß√µes, comportamentos)

#Vantagens:
#‚úÖ Reutiliza√ß√£o de c√≥digo (evita repeti√ß√£o)
#‚úÖ Organiza√ß√£o melhorada (c√≥digo mais leg√≠vel)
#‚úÖ Facilidade de manuten√ß√£o (altera√ß√µes pontuais)

#2. Pilares da POO em Python
#2.1. Classes e Objetos
#Classe: Molde que define atributos e m√©todos.

#Objeto: Inst√¢ncia (realiza√ß√£o concreta) de uma classe.

#Exemplo:

#python
# Classe Carro
class Carro:
    # M√©todo especial __init__ (inicializador)
    def __init__(self, cor, modelo, ano):
        self.cor = cor      # Atributo
        self.modelo = modelo
        self.ano = ano

    # M√©todo
    def acelerar(self):
        print("Vrummm! O carro est√° acelerando!")

# Criando um objeto (inst√¢ncia)
meu_carro = Carro("Vermelho", "Fusca", 1970)
print(meu_carro.modelo)  # Sa√≠da: Fusca
meu_carro.acelerar()     # Sa√≠da: Vrummm! O carro est√° acelerando!

#2.2. Encapsulamento
#Protege os dados internos, permitindo acesso controlado por m√©todos.

#Exemplo:

#python
class ContaBancaria:
    def __init__(self):
        self.__saldo = 0  # Atributo privado (__)

    # M√©todo p√∫blico para depositar
    def depositar(self, valor):
        if valor > 0:
            self.__saldo += valor

    # M√©todo p√∫blico para ver saldo
    def get_saldo(self):
        return self.__saldo

# Uso
minha_conta = ContaBancaria()
minha_conta.depositar(100)
print(minha_conta.get_saldo())  # Sa√≠da: 100
# minha_conta.__saldo  # Erro! Atributo privado.
#2.3. Heran√ßa
#Uma classe filha herda atributos e m√©todos da classe pai.

#Exemplo:

#python
# Classe Pai
class Animal:
    def comer(self):
        print("O animal est√° comendo.")

# Classe Filha
class Cachorro(Animal):  # Herda de Animal
    def latir(self):
        print("Au au!")

# Uso
rex = Cachorro()
rex.comer()  # M√©todo herdado (Sa√≠da: O animal est√° comendo.)
rex.latir()  # M√©todo pr√≥prio (Sa√≠da: Au au!)
#2.4. Polimorfismo
#M√©todos com o mesmo nome podem ter comportamentos diferentes.

#Exemplo:

#python
class Animal:
    def emitir_som(self):
        print("Som gen√©rico")

class Gato(Animal):
    def emitir_som(self):  # Sobrescreve o m√©todo
        print("Miau!")

class Vaca(Animal):
    def emitir_som(self):  # Sobrescreve o m√©todo
        print("Moo!")

# Uso
animais = [Gato(), Vaca()]
for animal in animais:
    animal.emitir_som()
# Sa√≠da:
# Miau!
# Moo!
#3. Resumo dos Pilares
#Pilar	Conceito	Exemplo Python
#Classe/Objeto	Molde e inst√¢ncia	carro = Carro("Azul", "Civic", 2020)
#Encapsulamento	Prote√ß√£o de dados	self.__saldo + m√©todos get_saldo()
#Heran√ßa	Reutiliza√ß√£o de c√≥digo	class Cachorro(Animal):
#Polimorfismo	Mesmo m√©todo, a√ß√µes diferentes	def emitir_som() em Gato e Vaca
#4. Atividade Pr√°tica (para a turma)
#Crie uma classe Pessoa com:

#Atributos: nome, idade

#M√©todo: fazer_aniversario() (aumenta a idade em 1)

#Depois, crie Aluno (herda de Pessoa) com:

#Atributo extra: matricula

#M√©todo extra: estudar() (imprime "Estudando...")

#Solu√ß√£o sugerida:

#python
class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

    def fazer_aniversario(self):
        self.idade += 1

class Aluno(Pessoa):
    def __init__(self, nome, idade, matricula):
        super().__init__(nome, idade)  # Chama o __init__ da classe pai
        self.matricula = matricula

    def estudar(self):
        print(f"{self.nome} est√° estudando...")

# Uso
aluno1 = Aluno("Jo√£o", 20, "20240001")
aluno1.fazer_aniversario()
print(aluno1.idade)  # Sa√≠da: 21
aluno1.estudar()     # Sa√≠da: Jo√£o est√° estudando...
#5. Conclus√£o
#POO em Python √© poderosa e intuitiva.

#Use classes, objetos, encapsulamento, heran√ßa e polimorfismo para criar c√≥digo organizado.

#Pratiquem com exemplos do dia a dia (carros, animais, contas banc√°rias, etc.).

#D√∫vidas? Bora codar! üöÄüêç

#obrigado
#De nada! Fico feliz em ajudar. üòä

#Se precisar de mais exemplos, exerc√≠cios ou explica√ß√µes sobre POO em Python (ou qualquer outro t√≥pico de programa√ß√£o), √© s√≥ chamar!

#Boa aula e sucesso com seus alunos! üöÄüêç

#Dica extra: Que tal sugerir um projeto simples para a turma?

#Sistema de Biblioteca: Classes Livro, Autor, Usu√°rio com empr√©stimos e devolu√ß√µes.

#python
class Livro:
    def __init__(self, titulo, autor):
        self.titulo = titulo
        self.autor = autor
        self.disponivel = True

    def emprestar(self):
        if self.disponivel:
            self.disponivel = False
            return True
        return False

# Desafiem os alunos a completar o c√≥digo!